# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import bstone_pb2 as bstone__pb2


class BstoneStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Entities = channel.unary_unary(
                '/pb.Bstone/Entities',
                request_serializer=bstone__pb2.BstoneRequest.SerializeToString,
                response_deserializer=bstone__pb2.BstoneEntitiesResponse.FromString,
                )
        self.Categories = channel.unary_unary(
                '/pb.Bstone/Categories',
                request_serializer=bstone__pb2.BstoneRequest.SerializeToString,
                response_deserializer=bstone__pb2.BstoneCategoriesResponse.FromString,
                )
        self.Abbreviations = channel.unary_unary(
                '/pb.Bstone/Abbreviations',
                request_serializer=bstone__pb2.BstoneRequest.SerializeToString,
                response_deserializer=bstone__pb2.BstoneAbbreviationsResponse.FromString,
                )
        self.CompoundReferences = channel.unary_unary(
                '/pb.Bstone/CompoundReferences',
                request_serializer=bstone__pb2.BstoneRequest.SerializeToString,
                response_deserializer=bstone__pb2.BstoneCompoundReferencesResponse.FromString,
                )


class BstoneServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Entities(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Categories(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Abbreviations(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CompoundReferences(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BstoneServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Entities': grpc.unary_unary_rpc_method_handler(
                    servicer.Entities,
                    request_deserializer=bstone__pb2.BstoneRequest.FromString,
                    response_serializer=bstone__pb2.BstoneEntitiesResponse.SerializeToString,
            ),
            'Categories': grpc.unary_unary_rpc_method_handler(
                    servicer.Categories,
                    request_deserializer=bstone__pb2.BstoneRequest.FromString,
                    response_serializer=bstone__pb2.BstoneCategoriesResponse.SerializeToString,
            ),
            'Abbreviations': grpc.unary_unary_rpc_method_handler(
                    servicer.Abbreviations,
                    request_deserializer=bstone__pb2.BstoneRequest.FromString,
                    response_serializer=bstone__pb2.BstoneAbbreviationsResponse.SerializeToString,
            ),
            'CompoundReferences': grpc.unary_unary_rpc_method_handler(
                    servicer.CompoundReferences,
                    request_deserializer=bstone__pb2.BstoneRequest.FromString,
                    response_serializer=bstone__pb2.BstoneCompoundReferencesResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'pb.Bstone', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Bstone(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Entities(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pb.Bstone/Entities',
            bstone__pb2.BstoneRequest.SerializeToString,
            bstone__pb2.BstoneEntitiesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Categories(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pb.Bstone/Categories',
            bstone__pb2.BstoneRequest.SerializeToString,
            bstone__pb2.BstoneCategoriesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Abbreviations(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pb.Bstone/Abbreviations',
            bstone__pb2.BstoneRequest.SerializeToString,
            bstone__pb2.BstoneAbbreviationsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CompoundReferences(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pb.Bstone/CompoundReferences',
            bstone__pb2.BstoneRequest.SerializeToString,
            bstone__pb2.BstoneCompoundReferencesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
